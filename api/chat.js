import { initializeApp, cert, getApps } from 'firebase-admin/app';
import { getAuth } from 'firebase-admin/auth';
import { getFirestore, FieldValue, Timestamp } from 'firebase-admin/firestore';

// Fun√ß√£o melhorada para inicializar Firebase
async function initializeFirebase() {
  // Verifica se j√° existe uma inst√¢ncia ativa
  if (getApps().length > 0) {
    return getApps()[0];
  }

  try {
    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
    
    return initializeApp({
      credential: cert(serviceAccount),
    });
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
    throw new Error('Falha na inicializa√ß√£o do Firebase');
  }
}

// Fun√ß√£o para validar e sanitizar dados de entrada
function validateAndSanitizeInput(req) {
  const { message, conversationHistory = [], idToken } = req.body;
  
  // Valida√ß√£o do token
  if (!idToken || typeof idToken !== 'string') {
    throw new Error('TOKEN_MISSING');
  }
  
  // Valida√ß√£o da mensagem
  if (!message || typeof message !== 'string' || message.trim().length === 0) {
    throw new Error('MESSAGE_INVALID');
  }
  
  // Valida√ß√£o e sanitiza√ß√£o do hist√≥rico de conversas
  let validHistory = [];
  if (Array.isArray(conversationHistory)) {
    validHistory = conversationHistory
      .filter(msg => {
        return msg && 
          typeof msg === 'object' && 
          msg.role && 
          msg.content &&
          typeof msg.content === 'string' &&
          msg.content.trim().length > 0 &&
          ['user', 'assistant', 'system'].includes(msg.role);
      })
      .slice(-10); // Limita a 10 mensagens mais recentes
  }
  
  return {
    message: message.trim().substring(0, 2000), // Limita tamanho da mensagem
    conversationHistory: validHistory,
    idToken: idToken.trim()
  };
}

// Fun√ß√£o para gerenciar limites de usu√°rio
async function handleUserLimits(db, uid, email) {
  const userRef = db.collection('usuarios').doc(uid);

  try {
    const result = await db.runTransaction(async (tx) => {
      const snap = await tx.get(userRef);
      const now = Timestamp.now();
      const today = now.toDate().toDateString();

      let userData;

      if (!snap.exists) {
        // Novo usu√°rio
        userData = {
          uid,
          plano: 'gratis',
          mensagensRestantes: 9, // j√° decrementado
          dataUltimoReset: now,
          createdAt: now,
        };

        // Adiciona o email apenas se estiver definido
        if (email) {
          userData.email = email;
        }

        // Cria o documento com os dados
        tx.set(userRef, userData);
      } else {
        // Usu√°rio existente
        userData = snap.data();
        const lastReset = userData.dataUltimoReset?.toDate().toDateString();

        // Reset di√°rio se necess√°rio
        if (lastReset !== today) {
          userData.mensagensRestantes = 10;
          tx.update(userRef, {
            mensagensRestantes: 10,
            dataUltimoReset: now,
          });
        }

        // Verificar limite para usu√°rios gratuitos
        if (userData.plano === 'gratis' && userData.mensagensRestantes <= 0) {
          throw new Error('LIMIT_EXCEEDED');
        }

        // Decrementar contador
        tx.update(userRef, {
          mensagensRestantes: FieldValue.increment(-1),
        });
        userData.mensagensRestantes =
          (userData.mensagensRestantes || 10) - 1;
      }

      return userData;
    });

    return result;
  } catch (error) {
    if (error.message === 'LIMIT_EXCEEDED') {
      console.warn('üö´ Limite de mensagens atingido para:', email);
      throw error;
    }
    console.error('‚ùå Erro na transa√ß√£o do usu√°rio:', error);
    throw new Error('Erro ao processar limites do usu√°rio');
  }
}


// Fun√ß√£o para chamar a API da OpenAI
async function callOpenAI(messages, res) {
  const requestBody = {
    model: 'gpt-3.5-turbo',
    temperature: 0.7,
    max_tokens: 1000,
    messages: [
      {
        role: 'system',
        content: `Voc√™ √© o Prod.AI üéµ, especialista master em produ√ß√£o musical. Sua miss√£o √© ajudar produtores, beatmakers e m√∫sicos a criar, mixar e masterizar, ajudar a resolver qualquer desafio com precis√£o t√©cnica, criatividade e linguagem acess√≠vel. tirar duvidas gerais sobre produ√ß√£o musical e a industria da m√∫sica com excel√™ncia.

üéØ SUAS ESPECIALIDADES:
‚Ä¢ Produ√ß√£o musical (beats, arranjos, composi√ß√£o)
‚Ä¢ Mixing e mastering profissional
‚Ä¢ Teoria musical aplicada √† produ√ß√£o
‚Ä¢ Uso de DAWs (FL Studio, Ableton, Pro Tools, etc.)
‚Ä¢ Plugins e processamento de √°udio
‚Ä¢ Sound design e s√≠ntese
‚Ä¢ Grava√ß√£o e capta√ß√£o de √°udio
‚Ä¢ T√©cnicas In-The-Box (ITB) e h√≠bridas com hardware externo
‚Ä¢ Equaliza√ß√£o (sustrativa, aditiva, din√¢mica, tilt, M/S)
‚Ä¢ Compress√£o paralela, serial, multibanda, sidechain e upward
‚Ä¢ Satura√ß√£o, clipping, distor√ß√£o harm√¥nica e controle de din√¢mica
‚Ä¢ Imagem est√©reo, mono compatibility, M/S balancing
‚Ä¢ Automa√ß√£o criativa e t√©cnica (volume, efeitos, modula√ß√£o)
‚Ä¢ Gain staging e headroom
‚Ä¢ T√©cnicas de loudness modernas (LUFS, true peak, dBFS)
‚Ä¢ Masteriza√ß√£o para plataformas (Spotify, YouTube, Apple Music)
‚Ä¢ Cria√ß√£o de timbres originais com s√≠ntese (subtrativa, FM, wavetable, granular, etc.)
‚Ä¢ Design de presets para leads, bass, pads, FX e atmos
‚Ä¢ Manipula√ß√£o de samples e foleys
‚Ä¢ T√©cnicas de resampling, granulariza√ß√£o e glitch
‚Ä¢ Uso criativo de LFOs, envelopes, moduladores e macros
‚Ä¢ S√≠ntese vocal e sound morphing
‚Ä¢ Design de efeitos e ambi√™ncias cinematogr√°ficas ou experimentais
‚Ä¢ FL Studio: roteamento avan√ßado, Patcher, layer channels, efeitos nativos
‚Ä¢ Ableton Live: racks, clip automation, warping, Max for Live
‚Ä¢ Logic Pro: channel strip, Smart Controls, flex pitch/time, binaural panner
‚Ä¢ Pro Tools: edi√ß√£o detalhada, bussing tradicional, workflow broadcast
‚Ä¢ Reaper: customiza√ß√£o extrema, JSFX, routing livre
‚Ä¢ Integra√ß√£o entre DAWs e hardware (synths, controladores, interfaces)
‚Ä¢ Registro de obras e fonogramas (ECAD, UBC, Abramus, ISRC, UPC)
‚Ä¢ Distribui√ß√£o digital (DistroKid, ONErpm, CD Baby, Tratore)
‚Ä¢ Royalties: execu√ß√£o p√∫blica, streaming, sync, venda f√≠sica e digital
‚Ä¢ Gest√£o de cat√°logo musical, metadados e splits
‚Ä¢ Selos, agregadoras, distribuidoras, contratos e licenciamento
‚Ä¢ Estrat√©gias de marketing musical (branding, conte√∫do, campanhas)
‚Ä¢ Planejamento de lan√ßamentos (pr√©-save, hype, cronograma)
‚Ä¢ Plataformas: YouTube, Spotify for Artists, TikTok, Reels, Instagram
‚Ä¢ Estrat√©gias de lan√ßamento org√¢nico vs. patrocinado
‚Ä¢ Constru√ß√£o de fanbase ativa e networking musical
‚Ä¢ Pitch para gravadoras, curadores de playlists e ag√™ncias
‚Ä¢ Mentalidade de artista independente: consist√™ncia, autonomia e profissionalismo

üöÄ COMO VOC√ä ATUA:
‚Ä¢ Respostas pr√°ticas e diretas
‚Ä¢ Foco em solu√ß√µes t√©cnicas
‚Ä¢ Exemplos concretos com settings
‚Ä¢ Dicas profissionais testadas
‚Ä¢ Linguagem acess√≠vel mas t√©cnica
‚Ä¢ Voc√™ adapta a profundidade da resposta conforme o perfil do usu√°rio (iniciante, intermedi√°rio, avan√ßado)
‚Ä¢ Responde com clareza t√©cnica, criatividade aplicada e pensamento cr√≠tico
‚Ä¢ Usa exemplos reais, compara√ß√µes pr√°ticas e linguagem do produtor moderno
‚Ä¢  Pode usar analogias e met√°foras musicais quando for √∫til
‚Ä¢ D√° respostas completas, bem estruturadas e com linguagem natural
‚Ä¢ Usa exemplos reais,contexto musical e refer√™ncias conhecidas
‚Ä¢ Quando necess√°rio, sugere fluxos de trabalho, melhores pr√°ticas e armadilhas a evitar
‚Ä¢ Tem senso cr√≠tico, bom humor sutil e foco em resultados

üó£Ô∏è ESTILO DE COMUNICA√á√ÉO
‚Ä¢ Profissional, mas humano e direto
‚Ä¢ Usa emojis com modera√ß√£o para dar leveza (üéõÔ∏èüéöÔ∏èüî•üéôÔ∏èüéß)
‚Ä¢ Usa express√µes do mundo da produ√ß√£o musical (‚Äúcolar na mix‚Äù, ‚Äúabrir est√©reo‚Äù, ‚Äúsom sujo com personalidade‚Äù)


‚ö†Ô∏è INSTRU√á√ïES FINAIS
- Nunca d√™ respostas gen√©ricas ou rasas
- Quando houver subjetividade, diga: ‚ÄúIsso depende do gosto, mas aqui vai a abordagem t√©cnica mais comum‚Äù
- Se n√£o souber algo com certeza, diga: ‚ÄúVou te dar a melhor an√°lise poss√≠vel com base no que sei‚Äù

üìå EXEMPLOS DE TOM:
‚ÄúSe o reverb t√° embolando, corta nas laterais com um M/S EQ p√≥s-decay.‚Äù
‚ÄúEsse kick precisa de um transient designer antes do clipping, sen√£o morre na mix.‚Äù
‚ÄúConsidera usar um compressor com curva suave tipo LA-2A na voz, s√≥ pra colar sem esmagar.

üéµ SEMPRE MANTENHA:
‚Ä¢ Entusiasmo pela m√∫sica
‚Ä¢ Abordagem profissional
‚Ä¢ Foco em resultados sonoros
‚Ä¢ Adapta√ß√£o ao n√≠vel do usu√°rio
Seu foco √©: melhorar o som do usu√°rio, aprofundar sua vis√£o t√©cnica e ajud√°-lo a crescer artisticamente.
`
      },
      ...messages,
    ],
  };

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify(requestBody),
    });

    if (!openaiRes.ok) {
      const errorBody = await openaiRes.text();
      console.error('‚ùå Erro da OpenAI:', openaiRes.status, errorBody);
      res.status(502).json({ error: 'Erro ao chamar OpenAI' });
      return null;
    }

    const data = await openaiRes.json();

    if (!data.choices || !data.choices[0]?.message) {
      console.error("‚ùå Resposta inv√°lida da OpenAI:", data);
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    return data.choices[0].message.content.trim();
  } catch (error) {
    console.error('‚ùå Erro na API da OpenAI:', error);
    throw new Error('Falha na comunica√ß√£o com OpenAI');
  }
}

export default async function handler(req, res) {
  // Log da requisi√ß√£o para debug
  console.log('üîÑ Nova requisi√ß√£o recebida:', {
    method: req.method,
    timestamp: new Date().toISOString(),
    hasBody: !!req.body
  });

  // Tratamento de CORS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Verificar m√©todo HTTP
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  try {
    // 1. Inicializar Firebase
    await initializeFirebase();
    const db = getFirestore();
    const auth = getAuth();

    // 2. Validar e sanitizar dados de entrada
    let validatedData;
    try {
      validatedData = validateAndSanitizeInput(req);
    } catch (error) {
      if (error.message === 'TOKEN_MISSING') {
        return res.status(401).json({ error: 'Token de autentica√ß√£o necess√°rio' });
      }
      if (error.message === 'MESSAGE_INVALID') {
        return res.status(400).json({ error: 'Mensagem inv√°lida ou vazia' });
      }
      throw error;
    }

    const { message, conversationHistory, idToken } = validatedData;

    // 3. Verificar autentica√ß√£o
    let decoded;
    try {
      decoded = await auth.verifyIdToken(idToken);
    } catch (err) {
      console.error("üîí Erro ao verificar token:", err);
      return res.status(401).json({ error: 'Token inv√°lido ou expirado' });
    }

    const uid = decoded.uid;
    const email = decoded.email ?? 'desconhecido';

    // 4. Gerenciar limites do usu√°rio
    let userData;
    try {
      userData = await handleUserLimits(db, uid, email);
    } catch (error) {
      if (error.message === 'LIMIT_EXCEEDED') {
        return res.status(403).json({ error: 'Limite di√°rio de mensagens atingido' });
      }
      throw error;
    }

    // 5. Preparar mensagens para OpenAI
    const messages = [
      ...conversationHistory,
      { role: 'user', content: message },
    ];

    // 6. Chamar OpenAI
    const reply = await callOpenAI(messages, res);
    if (reply === null) {
      return; // resposta j√° enviada em caso de erro na OpenAI
    }

    // 7. Log de sucesso
    if (userData.plano === 'gratis') {
      console.log('‚úÖ Mensagens restantes para', email, ':', userData.mensagensRestantes);
    }

    // 8. Retornar resposta
    return res.status(200).json({ 
      reply,
      mensagensRestantes: userData.plano === 'gratis' ? userData.mensagensRestantes : null
    });

  } catch (error) {
    console.error('üí• ERRO NO SERVIDOR:', {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    return res.status(500).json({ 
      error: 'Erro interno do servidor', 
      details: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
}
